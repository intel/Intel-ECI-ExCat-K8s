// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/csl-svc/excat/pkg/rdtcat (interfaces: ExcatBuffers)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExcatBuffers is a mock of ExcatBuffers interface.
type MockExcatBuffers struct {
	ctrl     *gomock.Controller
	recorder *MockExcatBuffersMockRecorder
}

// MockExcatBuffersMockRecorder is the mock recorder for MockExcatBuffers.
type MockExcatBuffersMockRecorder struct {
	mock *MockExcatBuffers
}

// NewMockExcatBuffers creates a new mock instance.
func NewMockExcatBuffers(ctrl *gomock.Controller) *MockExcatBuffers {
	mock := &MockExcatBuffers{ctrl: ctrl}
	mock.recorder = &MockExcatBuffersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExcatBuffers) EXPECT() *MockExcatBuffersMockRecorder {
	return m.recorder
}

// GetClassNames mocks base method.
func (m *MockExcatBuffers) GetClassNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassNames indicates an expected call of GetClassNames.
func (mr *MockExcatBuffersMockRecorder) GetClassNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassNames", reflect.TypeOf((*MockExcatBuffers)(nil).GetClassNames))
}

// ReadFile mocks base method.
func (m *MockExcatBuffers) ReadFile(arg0 string, arg1 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockExcatBuffersMockRecorder) ReadFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockExcatBuffers)(nil).ReadFile), arg0, arg1)
}
